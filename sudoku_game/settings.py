"""
Django settings for sudoku_game project.

This configuration supports both development and production environments
with automatic environment detection and appropriate security settings.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# =============================================================================
# CORE DJANGO SETTINGS
# =============================================================================

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Create logs directory for application logging
LOG_DIR = os.path.join(BASE_DIR, "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Environment detection - set DJANGO_ENV=production for production deployment
ENVIRONMENT = os.environ.get("DJANGO_ENV", "development").lower()
# Uncomment below for forced production mode (or create a .env file with DJANGO_ENV=production)
# ENVIRONMENT = 'production'
IS_PRODUCTION = ENVIRONMENT == "production"

# =============================================================================
# ENVIRONMENT-SPECIFIC SETTINGS
# =============================================================================

if IS_PRODUCTION:
    # Production settings - secure configuration for live deployment
    # WARNING: Update these values before deploying to production!
    
    # Static files configuration for production
    STATIC_URL = "/sudoku/static/"  # URL prefix for static files
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # Collected static files location
    
    # TODO: SECURITY WARNING: Generate a new secret key for production!
    # Use: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
    SECRET_KEY = "<production-secret>"
    
    # TODO: SECURITY WARNING: Never run with debug=True in production!
    DEBUG = False
    
    # TODO: Update with your actual production domain(s)
    ALLOWED_HOSTS = ["localhost", "127.0.0.1", "yourdomain.com"]
    
    # Optional: Set if deploying under a subpath (e.g., /sudoku/)
    FORCE_SCRIPT_NAME = ""
    
    # Production database configuration
    # TODO: Configure your production database (PostgreSQL, MySQL, etc.)
    # Example for PostgreSQL:
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': os.environ.get('DB_NAME'),
    #         'USER': os.environ.get('DB_USER'),
    #         'PASSWORD': os.environ.get('DB_PASSWORD'),
    #         'HOST': os.environ.get('DB_HOST', 'localhost'),
    #         'PORT': os.environ.get('DB_PORT', '5432'),
    #     }
    # }
    
else:
    # Development settings - convenient for local development
    STATIC_URL = "/sudoku/static/"  # Static files URL prefix
    
    # Development secret key - DO NOT use in production
    SECRET_KEY = "django-insecure-_b1xr4eyzb@me2_=ta279=9g1#ja_so4ywb@o#%*owe3ub8+ad"
    
    # Allow local development hosts
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
    
    # Enable debug mode for development
    DEBUG = True
    
    # Static files directories for development
    STATICFILES_DIRS = [
        BASE_DIR / "sudoku" / "static",  # App-specific static files
    ]
    
    # SQLite database for development (simple setup)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# =============================================================================
# APPLICATION DEFINITION
# =============================================================================

# Installed Django applications
INSTALLED_APPS = [
    # Default Django apps
    "django.contrib.admin",           # Admin interface
    "django.contrib.auth",            # Authentication system
    "django.contrib.contenttypes",    # Content types framework
    "django.contrib.sessions",        # Session framework
    "django.contrib.messages",        # Messaging framework
    "django.contrib.staticfiles",     # Static files management
    
    # Project-specific apps
    "sudoku",                         # Main Sudoku game application
    "sudoku_game",                    # Project configuration app
]

# Middleware configuration - order matters!
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",        # Security headers
    "django.contrib.sessions.middleware.SessionMiddleware", # Session support
    "django.middleware.common.CommonMiddleware",            # Common functionality
    "django.middleware.csrf.CsrfViewMiddleware",           # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware", # User authentication
    "django.contrib.messages.middleware.MessageMiddleware", # Flash messages
    "django.middleware.clickjacking.XFrameOptionsMiddleware", # Clickjacking protection
    
    # Custom middleware
    "sudoku.middleware.PerformanceMonitoringMiddleware",   # Performance tracking
]

# Root URL configuration
ROOT_URLCONF = "sudoku_game.urls"

# =============================================================================
# TEMPLATE CONFIGURATION
# =============================================================================

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # Additional template directories (empty = use app directories)
        "APP_DIRS": True,  # Look for templates in app directories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",    # Debug info in templates
                "django.template.context_processors.request",  # Request object in templates
                "django.contrib.auth.context_processors.auth", # User info in templates
                "django.contrib.messages.context_processors.messages", # Messages in templates
            ],
        },
    },
]

# WSGI application entry point
WSGI_APPLICATION = "sudoku_game.wsgi.application"

# =============================================================================
# PASSWORD VALIDATION
# =============================================================================

# Password validation rules for user registration/changes
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

LANGUAGE_CODE = "en-us"  # Default language
TIME_ZONE = "UTC"        # Default timezone
USE_I18N = True          # Enable internationalization
USE_TZ = True            # Enable timezone support

# =============================================================================
# STATIC FILES CONFIGURATION
# =============================================================================

# Directory where collectstatic will gather all static files
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Static files finders - how Django locates static files
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",  # STATICFILES_DIRS
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",  # App static/ directories
]

# =============================================================================
# DATABASE & MODEL CONFIGURATION
# =============================================================================

# Default primary key field type for new models
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# =============================================================================
# SESSION CONFIGURATION
# =============================================================================

# Session management settings for user state persistence
SESSION_ENGINE = "django.contrib.sessions.backends.db"  # Store sessions in database
SESSION_COOKIE_AGE = 86400 * 7  # Session expires after 7 days
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when browser closes
SESSION_SAVE_EVERY_REQUEST = True  # Update session on every request
SESSION_COOKIE_PATH = "/sudoku"  # Session cookie path (matches URL prefix)
SESSION_COOKIE_NAME = "sessionid"  # Session cookie name
SESSION_COOKIE_DOMAIN = None  # Use default domain

# =============================================================================
# PRODUCTION SECURITY SETTINGS
# =============================================================================

# Additional security settings for production environment
if IS_PRODUCTION:
    # Session security
    SESSION_COOKIE_SECURE = True      # Only send session cookie over HTTPS
    SESSION_COOKIE_HTTPONLY = True    # Prevent JavaScript access to session cookie
    SESSION_COOKIE_SAMESITE = "Lax"   # CSRF protection
    
    # CSRF security
    CSRF_COOKIE_SECURE = True         # Only send CSRF cookie over HTTPS
    
    # HTTPS enforcement
    SECURE_SSL_REDIRECT = True        # Redirect all HTTP requests to HTTPS
    
    # HTTP Strict Transport Security (HSTS)
    SECURE_HSTS_SECONDS = 31536000    # 1 year - force HTTPS for this duration
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to subdomains
    SECURE_HSTS_PRELOAD = True        # Allow inclusion in browser HSTS preload lists
    
    # Proxy configuration (for deployment behind reverse proxy like nginx)
    USE_X_FORWARDED_HOST = True       # Trust X-Forwarded-Host header
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # Trust proxy SSL headers